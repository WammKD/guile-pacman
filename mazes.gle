#!/usr/bin/guile
!#
(use-modules (srfi srfi-1))

;; (define maze (list
;;                (list
;;                  "|" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-"
;;                      "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "|" "\n")
;;                (list
;;                  "|" " " " " " " " " " " " " " " " " " " " " "|"
;;                      "|" " " " " " " " " " " " " " " " " " " " " "|" "\n")
;;                (list
;;                  "|" " " "-" "-" "-" " " "-" "-" "-" "-" " " "|"
;;                      "|" " " "-" "-" "-" "-" " " "-" "-" "-" " " "|" "\n")
;;                (list
;;                  "|" " " "|" "|" "|" " " "|" "|" "|" "|" " " "|"
;;                      "|" " " "|" "|" "|" "|" " " "|" "|" "|" " " "|" "\n")
;;                (list
;;                  "|" " " "-" "-" "-" " " "-" "-" "-" "-" " " "-"
;;                      "-" " " "-" "-" "-" "-" " " "-" "-" "-" " " "|" "\n")
;;                (list
;;                  "|" " " " " " " " " " " " " " " " " " " " " " "
;;                      " " " " " " " " " " " " " " " " " " " " " " "|" "\n")
;;                (list
;;                  "|" " " "-" "-" "-" " " "-" "-" " " "-" "-" "-"
;;                      "-" "-" "-" " " "-" "-" " " "-" "-" "-" " " "|" "\n")
;;                (list
;;                  "|" " " " " " " " " " " "|" "|" " " " " " " "|"
;;                      "|" " " " " " " "|" "|" " " " " " " " " " " "|" "\n")
;;                (list
;;                  "-" "-" "-" "-" "-" " " "|" "|" "-" "-" " " "-"
;;                      "-" " " "-" "-" "|" "|" " " "-" "-" "-" "-" "-" "\n")
;;                (list
;;                  " " " " " " "|" "|" " " "|" "|" " " " " " " " "
;;                      " " " " " " " " "|" "|" " " "|" "|" " " " " " " "\n")
;;                (list
;;                  "-" "-" "-" "-" "-" " " "-" "-" " " "-" "-" " "
;;                      " " "-" "-" " " "-" "-" " " "-" "-" "-" "-" "-" "\n")
;;                (list
;;                  " " " " " " " " " " " " " " " " " " "|" " " " "
;;                      " " " " "|" " " " " " " " " " " " " " " " " " " "\n")
;;                (list
;;                  "-" "-" "-" "-" "-" " " "-" "-" " " "-" "-" "-"
;;                      "-" "-" "-" " " "-" "-" " " "-" "-" "-" "-" "-" "\n")
;;                (list
;;                  " " " " " " "|" "|" " " "|" "|" " " " " " " " "
;;                      " " " " " " " " "|" "|" " " "|" "|" " " " " " " "\n")
;;                (list
;;                  "-" "-" "-" "-" "-" " " "-" "-" " " "-" "-" "-"
;;                      "-" "-" "-" " " "-" "-" " " "-" "-" "-" "-" "-" "\n")
;;                (list
;;                  "|" " " " " " " " " " " " " " " " " " " " " "|"
;;                      "|" " " " " " " " " " " " " " " " " " " " " "|" "\n")
;;                (list
;;                  "|" " " "-" "-" "-" " " "-" "-" "-" "-" " " "-"
;;                      "-" " " "-" "-" "-" "-" " " "-" "-" "-" " " "|" "\n")
;;                (list
;;                  "|" " " " " "|" "|" " " " " " " " " " " " " " "
;;                      " " " " " " " " " " " " " " "|" "|" " " " " "|" "\n")
;;                (list
;;                  "|" "-" " " "-" "-" " " "-" "-" " " "-" "-" "-"
;;                      "-" "-" "-" " " "-" "-" " " "-" "-" " " "-" "|" "\n")
;;                (list
;;                  "|" " " " " " " " " " " "|" "|" " " " " " " "|"
;;                      "|" " " " " " " "|" "|" " " " " " " " " " " "|" "\n")
;;                (list
;;                  "|" " " "-" "-" "-" "-" "-" "-" "-" "-" " " "-"
;;                      "-" " " "-" "-" "-" "-" "-" "-" "-" "-" " " "|" "\n")
;;                (list
;;                  "|" " " " " " " " " " " " " " " " " " " " " " "
;;                      " " " " " " " " " " " " " " " " " " " " " " "|" "\n")
;;                (list
;;                  "|" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-"
;;                      "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "-" "|" "\n")))

;; (define maze (list
;;                (list
;;                  "X" "X" "X" "X" "X" "X" "X" "X" "X" "X" "X" "X"
;;                      "X" "X" "X" "X" "X" "X" "X" "X" "X" "X" "X" "X" "\n")
;;                (list
;;                  "X" " " " " " " " " " " " " " " " " " " " " "X"
;;                      "X" " " " " " " " " " " " " " " " " " " " " "X" "\n")
;;                (list
;;                  "X" " " "X" "X" "X" " " "X" "X" "X" "X" " " "X"
;;                      "X" " " "X" "X" "X" "X" " " "X" "X" "X" " " "X" "\n")
;;                (list
;;                  "X" " " "X" "X" "X" " " "X" "X" "X" "X" " " "X"
;;                      "X" " " "X" "X" "X" "X" " " "X" "X" "X" " " "X" "\n")
;;                (list
;;                  "X" " " "X" "X" "X" " " "X" "X" "X" "X" " " "X"
;;                      "X" " " "X" "X" "X" "X" " " "X" "X" "X" " " "X" "\n")
;;                (list
;;                  "X" " " " " " " " " " " " " " " " " " " " " " "
;;                      " " " " " " " " " " " " " " " " " " " " " " "X" "\n")
;;                (list
;;                  "X" " " "X" "X" "X" " " "X" "X" " " "X" "X" "X"
;;                      "X" "X" "X" " " "X" "X" " " "X" "X" "X" " " "X" "\n")
;;                (list
;;                  "X" " " " " " " " " " " "X" "X" " " " " " " "X"
;;                      "X" " " " " " " "X" "X" " " " " " " " " " " "X" "\n")
;;                (list
;;                  "X" "X" "X" "X" "X" " " "X" "X" "X" "X" " " "X"
;;                      "X" " " "X" "X" "X" "X" " " "X" "X" "X" "X" "X" "\n")
;;                (list
;;                  " " " " " " "X" "X" " " "X" "X" " " " " " " " "
;;                      " " " " " " " " "X" "X" " " "X" "X" " " " " " " "\n")
;;                (list
;;                  "X" "X" "X" "X" "X" " " "X" "X" " " "X" "X" " "
;;                      " " "X" "X" " " "X" "X" " " "X" "X" "X" "X" "X" "\n")
;;                (list
;;                  " " " " " " " " " " " " " " " " " " "X" " " " "
;;                      " " " " "X" " " " " " " " " " " " " " " " " " " "\n")
;;                (list
;;                  "X" "X" "X" "X" "X" " " "X" "X" " " "X" "X" "X"
;;                      "X" "X" "X" " " "X" "X" " " "X" "X" "X" "X" "X" "\n")
;;                (list
;;                  " " " " " " "X" "X" " " "X" "X" " " " " " " " "
;;                      " " " " " " " " "X" "X" " " "X" "X" " " " " " " "\n")
;;                (list
;;                  "X" "X" "X" "X" "X" " " "X" "X" " " "X" "X" "X"
;;                      "X" "X" "X" " " "X" "X" " " "X" "X" "X" "X" "X" "\n")
;;                (list
;;                  "X" " " " " " " " " " " " " " " " " " " " " "X"
;;                      "X" " " " " " " " " " " " " " " " " " " " " "X" "\n")
;;                (list
;;                  "X" " " "X" "X" "X" " " "X" "X" "X" "X" " " "X"
;;                      "X" " " "X" "X" "X" "X" " " "X" "X" "X" " " "X" "\n")
;;                (list
;;                  "X" " " " " "X" "X" " " " " " " " " " " " " " "
;;                      " " " " " " " " " " " " " " "X" "X" " " " " "X" "\n")
;;                (list
;;                  "X" "X" " " "X" "X" " " "X" "X" " " "X" "X" "X"
;;                      "X" "X" "X" " " "X" "X" " " "X" "X" " " "X" "X" "\n")
;;                (list
;;                  "X" " " " " " " " " " " "X" "X" " " " " " " "X"
;;                      "X" " " " " " " "X" "X" " " " " " " " " " " "X" "\n")
;;                (list
;;                  "X" " " "X" "X" "X" "X" "X" "X" "X" "X" " " "X"
;;                      "X" " " "X" "X" "X" "X" "X" "X" "X" "X" " " "X" "\n")
;;                (list
;;                  "X" " " " " " " " " " " " " " " " " " " " " " "
;;                      " " " " " " " " " " " " " " " " " " " " " " "X" "\n")
;;                (list
;;                  "X" "X" "X" "X" "X" "X" "X" "X" "X" "X" "X" "X"
;;                      "X" "X" "X" "X" "X" "X" "X" "X" "X" "X" "X" "X" "\n")))

(define (maze_new s)
  (define curr (:
		 (fold
		   (lambda (char nested-list)
		     (lst
		       (: nested-list 0 -1)
		       (list (lst
                               (!! nested-list -1)
                               ((if (== char #\X)
                                    (lambda (x)
                                      (color COLOR_BLUE (bold x)))
                                  low) char)))
		       (if (!= char #\newline)
			   '()
			 '(()) )))
		   '(())
		   (string->list s))
		 0
		 -1))



  (define (get-coord-char grid coord)
    (define x (vector-ref coord 0))
    (define y (vector-ref coord 1))

    (!! (!! grid y) x))
  
  (define (change-coord grid coord replacement)
    (define x (vector-ref coord 0))
    (define y (vector-ref coord 1))
    (define tmp (!! grid y)) 

    (lst
      (: grid 0 y)
      (list (lst
              (: tmp 0 x)
              replacement
              (: tmp (++ x))))
      (: grid (++ y))))



  (lambda (method . xs)
    (cond                                            ;; coordinate
     [(== method #:get-coord-char) (get-coord-char curr (!! xs 0))]
     [(== method #:change-coord)                      (change-coord
                                                        curr
                                                        (!! xs 0)    ;; coord
                                                        (!! xs 1))]  ;; replace
     [(== method #:get-maze)                                  curr])))


(define main_maze (maze_new (str "XXXXXXXXXXXXXXXXXXXXXXXX\n"
                                 "X..........XX..........X\n"
                                 "X.XXX.XXXX.XX.XXXX.XXX.X\n"
                                 "X.XXX.XXXX.XX.XXXX.XXX.X\n"
                                 "X.XXX.XXXX.XX.XXXX.XXX.X\n"
                                 "X......................X\n"
                                 "X.XXX.XX.XXXXXX.XX.XXX.X\n"
                                 "X.....XX...XX...XX.....X\n"
                                 "XXXXX.XXXX XX XXXX.XXXXX\n"
                                 "   XX.XX        XX.XX   \n"
                                 "XXXXX.XX XX  XX XX.XXXXX\n"
                                 "     .   X    X   .     \n"
                                 "XXXXX.XX XXXXXX XX.XXXXX\n"
                                 "   XX.XX        XX.XX   \n"
                                 "XXXXX.XX XXXXXX XX.XXXXX\n"
                                 "X..........XX..........X\n"
                                 "X.XXX.XXXX.XX.XXXX.XXX.X\n"
                                 "X..XX..............XX..X\n"
                                 "XX.XX.XX.XXXXXX.XX.XX.XX\n"
                                 "X.....XX...XX...XX.....X\n"
                                 "X.XXXXXXXX.XX.XXXXXXXX.X\n"
                                 "X......................X\n"
                                 "XXXXXXXXXXXXXXXXXXXXXXXX\n")))
